// Generated by gencpp from file gps_reader/LoggerBox.msg
// DO NOT EDIT!


#ifndef GPS_READER_MESSAGE_LOGGERBOX_H
#define GPS_READER_MESSAGE_LOGGERBOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3Stamped.h>
#include <geometry_msgs/Vector3Stamped.h>
#include <geometry_msgs/Vector3Stamped.h>

namespace gps_reader
{
template <class ContainerAllocator>
struct LoggerBox_
{
  typedef LoggerBox_<ContainerAllocator> Type;

  LoggerBox_()
    : header()
    , accel()
    , gyro()
    , mag()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , heading(0.0)
    , ground_speed(0.0)
    , fixtype(0.0)
    , imudegc(0.0)
    , siv(0.0)
    , pdop(0.0)
    , hz(0.0)
    , gpstime()
    , rtctime()  {
    }
  LoggerBox_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , accel(_alloc)
    , gyro(_alloc)
    , mag(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , heading(0.0)
    , ground_speed(0.0)
    , fixtype(0.0)
    , imudegc(0.0)
    , siv(0.0)
    , pdop(0.0)
    , hz(0.0)
    , gpstime()
    , rtctime()  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3Stamped_<ContainerAllocator>  _accel_type;
  _accel_type accel;

   typedef  ::geometry_msgs::Vector3Stamped_<ContainerAllocator>  _gyro_type;
  _gyro_type gyro;

   typedef  ::geometry_msgs::Vector3Stamped_<ContainerAllocator>  _mag_type;
  _mag_type mag;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _ground_speed_type;
  _ground_speed_type ground_speed;

   typedef double _fixtype_type;
  _fixtype_type fixtype;

   typedef double _imudegc_type;
  _imudegc_type imudegc;

   typedef double _siv_type;
  _siv_type siv;

   typedef double _pdop_type;
  _pdop_type pdop;

   typedef double _hz_type;
  _hz_type hz;

   typedef ros::Time _gpstime_type;
  _gpstime_type gpstime;

   typedef ros::Time _rtctime_type;
  _rtctime_type rtctime;





  typedef boost::shared_ptr< ::gps_reader::LoggerBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_reader::LoggerBox_<ContainerAllocator> const> ConstPtr;

}; // struct LoggerBox_

typedef ::gps_reader::LoggerBox_<std::allocator<void> > LoggerBox;

typedef boost::shared_ptr< ::gps_reader::LoggerBox > LoggerBoxPtr;
typedef boost::shared_ptr< ::gps_reader::LoggerBox const> LoggerBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gps_reader::LoggerBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gps_reader::LoggerBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gps_reader::LoggerBox_<ContainerAllocator1> & lhs, const ::gps_reader::LoggerBox_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.accel == rhs.accel &&
    lhs.gyro == rhs.gyro &&
    lhs.mag == rhs.mag &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.heading == rhs.heading &&
    lhs.ground_speed == rhs.ground_speed &&
    lhs.fixtype == rhs.fixtype &&
    lhs.imudegc == rhs.imudegc &&
    lhs.siv == rhs.siv &&
    lhs.pdop == rhs.pdop &&
    lhs.hz == rhs.hz &&
    lhs.gpstime == rhs.gpstime &&
    lhs.rtctime == rhs.rtctime;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gps_reader::LoggerBox_<ContainerAllocator1> & lhs, const ::gps_reader::LoggerBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gps_reader

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gps_reader::LoggerBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_reader::LoggerBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gps_reader::LoggerBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gps_reader::LoggerBox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_reader::LoggerBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_reader::LoggerBox_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gps_reader::LoggerBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e144fb7110cd01d9d8b2e105ffd94048";
  }

  static const char* value(const ::gps_reader::LoggerBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe144fb7110cd01d9ULL;
  static const uint64_t static_value2 = 0xd8b2e105ffd94048ULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_reader::LoggerBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gps_reader/LoggerBox";
  }

  static const char* value(const ::gps_reader::LoggerBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gps_reader::LoggerBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"geometry_msgs/Vector3Stamped accel\n"
"geometry_msgs/Vector3Stamped gyro\n"
"geometry_msgs/Vector3Stamped mag\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 altitude\n"
"float64 heading\n"
"float64 ground_speed\n"
"float64 fixtype\n"
"float64 imudegc\n"
"float64 siv\n"
"float64 pdop\n"
"float64 hz\n"
"time gpstime\n"
"time rtctime\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3Stamped\n"
"# This represents a Vector3 with reference coordinate frame and timestamp\n"
"Header header\n"
"Vector3 vector\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::gps_reader::LoggerBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gps_reader::LoggerBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.accel);
      stream.next(m.gyro);
      stream.next(m.mag);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.heading);
      stream.next(m.ground_speed);
      stream.next(m.fixtype);
      stream.next(m.imudegc);
      stream.next(m.siv);
      stream.next(m.pdop);
      stream.next(m.hz);
      stream.next(m.gpstime);
      stream.next(m.rtctime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LoggerBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_reader::LoggerBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gps_reader::LoggerBox_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "accel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3Stamped_<ContainerAllocator> >::stream(s, indent + "  ", v.accel);
    s << indent << "gyro: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3Stamped_<ContainerAllocator> >::stream(s, indent + "  ", v.gyro);
    s << indent << "mag: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3Stamped_<ContainerAllocator> >::stream(s, indent + "  ", v.mag);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "ground_speed: ";
    Printer<double>::stream(s, indent + "  ", v.ground_speed);
    s << indent << "fixtype: ";
    Printer<double>::stream(s, indent + "  ", v.fixtype);
    s << indent << "imudegc: ";
    Printer<double>::stream(s, indent + "  ", v.imudegc);
    s << indent << "siv: ";
    Printer<double>::stream(s, indent + "  ", v.siv);
    s << indent << "pdop: ";
    Printer<double>::stream(s, indent + "  ", v.pdop);
    s << indent << "hz: ";
    Printer<double>::stream(s, indent + "  ", v.hz);
    s << indent << "gpstime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.gpstime);
    s << indent << "rtctime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.rtctime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPS_READER_MESSAGE_LOGGERBOX_H
